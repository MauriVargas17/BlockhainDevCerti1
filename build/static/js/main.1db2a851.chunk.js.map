{"version":3,"sources":["logo.svg","ethereum/web3.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialize","ethereum","window","Boolean","isMetaMask","isMetamaskInstalled","alert","web3","Web3","connectWallet","request","method","code","message","App","useEffect","loadBlockchainData","networkData","lotteryContract","networks","console","log","abi","address","deployedContract","eth","Contract","methods","getPlayers","call","players","length","className","src","logo","alt","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"+92HAAe,MAA0B,iC,2BCO5BA,EAAa,YALE,WACxB,IAAOC,EAAYC,OAAZD,SACP,OAAOE,QAAQF,GAAYA,EAASG,YAIjCC,GAICC,MAAM,iCAHNA,MAAM,0BACNJ,OAAOK,KAAO,IAAIC,IAAKN,OAAOD,YAMzBQ,EAAa,iDAAG,iHAEfP,OAAOD,SAASS,QAAQ,CAACC,OAAQ,wBAFlB,OAGrBL,MAAM,qCAHe,+CAKP,OAAX,KAAEM,KACDN,MAAM,uBAENA,MAAM,KAAEO,SARS,wDAAH,qD,iBCqCXC,MA/Cf,WAEIC,qBAAU,WAEHb,OAAOK,MACNP,MAEL,IAEH,IAAMgB,EAAkB,iDAAG,2GAGjBR,EAAON,OAAOK,KAEdU,EAAcC,EAAgBC,SAAS,MAC7CC,QAAQC,IAAI,gBAAiBJ,IAE1BA,EARoB,wBASbK,EAAMJ,EAAgBI,IACtBC,EAAUN,EAAYM,QAC5BH,QAAQC,IAAI,YAAaE,GACnBC,EAAmB,IAAIhB,EAAKiB,IAAIC,SAASJ,EAAKC,GAZjC,UAcGC,EAAiBG,QAAQC,aAAaC,OAdzC,QAcbC,EAda,OAgBnBV,QAAQC,IAAI,YAAaS,EAASA,EAAQC,QAhBvB,4CAAH,qDAsB1B,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,+CADP,0BAIE,+DACA,wBAAQC,QAAW,kBAAM3B,KAAzB,qBACA,wBAAQ2B,QAAW,kBAAMpB,KAAzB,mCCjCKqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHDQ,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,OAOJd,M","file":"static/js/main.1db2a851.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import Web3 from \"web3\";\n\nconst isMetamaskInstalled = () => {\n    const {ethereum} = window;\n    return Boolean(ethereum && ethereum.isMetaMask);\n}\n\nexport const initialize = () => {\n    if(isMetamaskInstalled()){\n        alert(\"Metamask is installed!\");\n        window.web3 = new Web3(window.ethereum);\n    } else {\n        alert(\"Metamask is not installed...\");\n    }\n}\n\nexport const connectWallet = async () => {\n    try{\n        await window.ethereum.request({method: \"eth_requestAccounts\"});\n        alert(\"Wallet was successfully connected\");\n    } catch (e) {\n        if(e.code === 4001){\n            alert(\"Connecting error...\");\n        } else {\n            alert(e.message);\n        }\n    }\n\n}","import React, {Component, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {connectWallet, initialize} from \"./ethereum/web3\";\nimport lotteryContract from \"./ethereum/abis/Lottery.json\"\n\nfunction App() {\n\n    useEffect(() => {\n        // @ts-ignore\n        if(window.web3){\n            initialize();\n        }\n    }, [])\n\n    const loadBlockchainData = async () => {\n     //   const deployedContract;\n        // @ts-ignore\n        const Web3 = window.web3;\n\n        const networkData = lotteryContract.networks['5777'];\n        console.log('networkData: ', networkData);\n\n        if(networkData){\n            const abi = lotteryContract.abi;\n            const address = networkData.address;\n            console.log('address: ', address);\n            const deployedContract = new Web3.eth.Contract(abi, address);\n\n            const players = await deployedContract.methods.getPlayers().call();\n\n            console.log('players: ', players, players.length);\n\n\n        }\n    }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n\n          <p>Hi React, Truffle and Firebase</p>\n          <button onClick = {() => connectWallet()}>Connect</button>\n          <button onClick = {() => loadBlockchainData()}>Load Blockchain</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["logo.svg","ethereum/web3.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialize","ethereum","window","Boolean","isMetaMask","isMetamaskInstalled","alert","web3","Web3","connectWallet","request","method","code","message","App","useState","contract","setContract","manager","setManager","players","setPlayers","balance","setBalance","value","setValue","setMessage","useEffect","loadBlockchainData","networkData","lotteryContract","networks","console","log","abi","address","eth","Contract","deployedContract","methods","getPlayers","call","length","owner","getBalance","options","loadBalance","loadPlayers","onPickWinner","getAccounts","accounts","pickWinner","send","from","onRegistration","registerPlayer","utils","toWei","className","src","logo","alt","onClick","type","onChange","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9496b4b6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import Web3 from \"web3\";\n\nconst isMetamaskInstalled = () => {\n    const {ethereum} = window;\n    return Boolean(ethereum && ethereum.isMetaMask);\n}\n\nexport const initialize = () => {\n    if(isMetamaskInstalled()){\n        alert(\"Metamask is installed!\");\n        window.web3 = new Web3(window.ethereum);\n    } else {\n        alert(\"Metamask is not installed...\");\n    }\n}\n\nexport const connectWallet = async () => {\n    try{\n        await window.ethereum.request({method: \"eth_requestAccounts\"});\n        alert(\"Wallet was successfully connected\");\n    } catch (e) {\n        if(e.code === 4001){\n            alert(\"Connecting error...\");\n        } else {\n            alert(e.message);\n        }\n    }\n\n}","import React, {Component, useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {connectWallet, initialize} from \"./ethereum/web3\";\nimport lotteryContract from \"./ethereum/abis/Lottery.json\"\n\nfunction App() {\n\n    const [contract, setContract] = useState<any>('');\n    // console.log(contract);\n    // setContract('new value');\n    /*\n        Variables to handle the smart contract\n    */\n    const [manager, setManager] = useState<any>('');\n    const [players, setPlayers] = useState<any>({});\n    const [balance, setBalance] = useState<any>('');\n\n    const [value, setValue] = useState<any>(0);\n\n    const [message, setMessage] = useState<any>('');\n\n    useEffect(() => {\n        // @ts-ignore\n        if(window.web3){\n            initialize();\n            loadBlockchainData();\n        }\n    }, [])\n\n    const loadBlockchainData = async () => {\n        // @ts-ignore\n        const Web3 = window.web3;\n\n        const networkData = lotteryContract.networks['97'];\n        console.log('networkData: ', networkData);\n\n        if(networkData){\n            const abi = lotteryContract.abi;\n            const address = networkData.address;\n            console.log('address: ', address);\n            const deployedContract = await new Web3.eth.Contract(abi, address);\n\n\n            const players = await deployedContract.methods.getPlayers().call();\n            await setPlayers(players);\n\n            console.log('players: ', players, players.length);\n\n            const manager = await deployedContract.methods.owner().call();\n            await setManager(manager);\n\n            const balance = await Web3.eth.getBalance(deployedContract.options.address);\n            await setBalance(balance);\n\n            await setContract(deployedContract);\n\n\n        }\n    }\n\n    const loadBalance = async () => {\n        // @ts-ignore\n        const Web3 = window.web3;\n        const balance = await Web3.eth.getBalance(contract.options.address);\n        await setBalance(balance);\n    }\n\n    const loadPlayers = async () => {\n        const players = await contract.methods.getPlayers().call();\n        await setPlayers(players);\n    }\n\n    const onPickWinner = async () => {\n        //@ts-ignore\n        const Web3 = window.web3;\n        const accounts = await Web3.eth.getAccounts();\n\n        setMessage(\n            \"Waiting for transaction confirmation\"\n        )\n\n        await contract.methods.pickWinner().send({\n            from: accounts[0],\n        })\n\n        setMessage(\n            \"We have a winner!\"\n        )\n\n\n        loadPlayers();\n        loadBalance();\n\n\n    }\n\n    const onRegistration = async () => {\n        //@ts-ignore\n        const Web3 = window.web3;\n\n        const accounts = await Web3.eth.getAccounts();\n\n        setMessage(\n            \"Waiting for transaction confirmation\"\n        )\n\n        await contract.methods.registerPlayer().send({\n            from: accounts[0],\n            value: Web3.utils.toWei(value, \"ether\")\n        })\n\n        setMessage(\n            \"Request successful. You have been registered\"\n        )\n        loadPlayers();\n        loadBalance();\n    }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n\n          <p>This app uses Binance Smart Chain</p>\n          <button onClick = {() => connectWallet()} className=\"btn btn-success\">Connect</button>\n\n          <button onClick = {() => onPickWinner()} className=\"btn btn-success\">Pick Winner!</button>\n\n          <p>Players: {players.length}</p>\n          <p>Balance: {balance}</p>\n          <p>Owner: {manager}</p>\n\n          <p>Minimum amount to participate: 2.1 ETH</p>\n          <input type = 'text' value = {value} onChange = {(event) => {setValue(event.target.value)}}/>\n          <button onClick={() => {onRegistration()}} className=\"btn btn-warning\">Register NOW</button>\n\n          <p>{message}</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}